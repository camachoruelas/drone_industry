{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/app/App.html",
    "../src/app/components/BarChart.html",
    "../src/app/components/Loading.html",
    "../src/app/components/MapPies/MapPies.html",
    "../src/app/components/MapPies/MapboxglUnsupported.html",
    "../src/app/components/MapPies/Map.html"
  ],
  "sourcesContent": [
    "<svelte:head>\n    <title>{$copy.title} ({withNestaFooter ? \"fullscreen\" : \"embed\"})</title>\n</svelte:head>\n<div class=\"app\">\n    <main>\n    {#if isIterableNotEmpty($allCompanies)}\n    <div class=\"map\">\n        <MapPies\n            {accessToken}\n            {colorScale}\n            {getLngLat}\n            getItemID={getID}\n            items={$companies}\n            keys={$allEntityTypes}\n            radiusMax=18\n            radiusMin=0.25\n            {styleURL}\n            withScaleControl={mapWithScaleControl}\n            withZoomControl={mapWithZoomControl}\n            on:enableItemsEditing=\"$fire('entityType:enableEditing')\"\n        />\n    </div>\n    <div class=\"categories\">\n        <BarChart\n            {colorScale}\n            items={byEntitytype}\n            on:toggleItem=\"$fire('entityType:toggle', event.key)\"\n            on:deselectAllItems=\"$fire('entityType:deselectAll')\"\n            on:selectAllItems=\"$fire('entityType:selectAll')\"\n            selectedKeys={$entityTypes}\n            title=\"Entity types\"\n            active={$areEntityTypesEditable}\n        />\n        {#if $isTechnologyDeveloperSelected}\n        <!-- same technologyType's red with higher luma to tone it down re to entity types-->\n        <BarChart\n            color=\"hsla(9, 87%, 81%, 1)\"\n            items={byTechnologyType}\n            on:toggleItem=\"$fire('technologyType:toggle', event.key)\"\n            on:deselectAllItems=\"$fire('technologyType:deselectAll')\"\n            on:selectAllItems=\"$fire('technologyType:selectAll')\"\n            selectedKeys={$technologyTypes}\n            title=\"Technology types\"\n            active={$areEntityTypesEditable}\n        />\n        {/if}\n    </div>\n    {:else}\n    <Loading />\n    {/if}\n    </main>\n\n    <!-- FIXME `$areEntityTypesEditable` forces a repaint to avoid artifacts with the footer -->\n    {#if withNestaFooter}\n    <footer>\n        <NestaFooter baseURL=\"https://www.nesta.org.uk\"/>\n    </footer>\n    {/if}\n</div>\n\n<script>\n    import _ from \"lamb\";\n\n    import * as d3 from \"@vendor/d3\";\n\n    import {\n        keysToKeyedZeroes,\n        pairToKeyValueObject,\n    } from \"@utils/arrayUtils\";\n    import {\n        isIterableNotEmpty,\n    } from \"@utils/iterableUtils\";\n    import {objectToKeyValueArray} from \"@utils/objUtils\";\n    import {getID, getLngLat} from \"@utils/companies\";\n\n    import {\n        MAPBOXGL_ACCESSTOKEN,\n        MAPBOXGL_STYLEURL,\n    } from \"./consts\";\n\n    export default {\n        data () {\n            return {\n                accessToken: MAPBOXGL_ACCESSTOKEN,\n                styleURL: MAPBOXGL_STYLEURL,\n                getLngLat,\n                getID\n            }\n        },\n        computed: {\n            // {key, value}[]\n            byEntitytype: ({$allCompanies, $allEntityTypes}) => {\n                const keysOccourrences = _.reduce(\n                    $allCompanies,\n                    (acc, item) => {\n                        _.forEach($allEntityTypes, key => {\n                            if (_.getIn(item, key)) {\n                                acc[key] += 1;\n                            }\n                        });\n\n                        return acc;\n                    },\n                    keysToKeyedZeroes($allEntityTypes)\n                );\n\n                return objectToKeyValueArray(keysOccourrences);\n            },\n\n            // {key, value}[]\n            byTechnologyType: ({$allCompanies, $allTechnologyTypes}) => {\n                const keysOccourrences = _.reduce(\n                    $allCompanies,\n                    (acc, item) => {\n                        _.forEach($allTechnologyTypes, key => {\n                            if (_.getIn(item, key)) {\n                                acc[key] += 1;\n                            }\n                        });\n\n                        return acc;\n                    },\n                    keysToKeyedZeroes($allTechnologyTypes)\n                );\n\n                return objectToKeyValueArray(keysOccourrences);\n            },\n\n            colorScale: ({$allEntityTypes}) =>\n                d3.scaleOrdinal()\n                .domain($allEntityTypes)\n                .range([\n                    \"#F15235\", // red\n                    \"#0FC3A8\", // teal\n                    \"#FAD677\", // yellow\n                    \"#032B2F\", // dark blue\n                    \"rgb(152, 78, 163)\" // purple\n                ])\n                // .range(d3.schemeSet1)\n        },\n\n        components: {\n            BarChart: \"./components/BarChart.html\",\n            Loading: \"./components/Loading.html\",\n            MapPies: \"./components/MapPies/MapPies.html\",\n            NestaFooter: \"./components/NestaFooter/NestaFooter.html\"\n            // BarChart: \"../../../BarChart\",   // as external module\n            // MapBoxGLDots: \"../../../MapBoxGLDots\",  // as external module\n        },\n\n        onstate ({changed, current, previous}) {\n            console.log(\"app:onstate\", changed, current, previous);\n        },\n        oncreate () {\n            console.log(\"app:oncreate\", this.get());\n        },\n\n        methods: {\n            toggleEntityType (entityType) {\n                this.store.fire(\"toggle:entityType\", entityType);\n            }\n        },\n        helpers: {\n            isIterableNotEmpty\n        }\n    }\n</script>\n\n<style>\n    .app {\n        width: 100%;\n        height: 100%;\n\n        display: flex;\n        flex-direction: column;\n\n        /* overflow: hidden; */\n    }\n\n    main {\n        flex: 1;\n        width: 100%;\n        /* height: calc(100% - 180px); */\n        /* 176 + 3 px (border), also good for mobile so we have some room */\n        /* for dragging up but the footer won't take the whole screen */\n\n        position: relative; /* .categories */\n        overflow: hidden;\n    }\n\n    .map {\n        width: 100%;\n        height: 100%;\n    }\n\n    footer {\n        flex: 0 0 180px;\n    }\n\n    .categories {\n        position: absolute;\n        top: 0;\n    \tright: 0;\n\n        /* own width + padding-right to move the scroolbar out of the window */\n        width: calc(350px + 100px);\n        margin-top: 1em;\n        padding-right: 100px;\n        margin-right: -100px;\n\n        max-height: 100%;\n        overflow-y: scroll;\n    }\n</style>\n",
    "<div class=\"barchartView\" ref:barchart>\n    {#if title}\n    <div class=\"title\">\n        <span>{title}</span>\n    </div>\n    {/if}\n    <div class=\"items\">\n        {#each itemsWithSelection as {key, value, selected}}\n        <div class=\"item {selected ? 'selected' : ''}\"\n            on:click=\"fire('toggleItem', {key})\"\n        >\n            <div class=\"label\">\n                <span>{key} ({value})</span>\n            </div>\n            <div class=\"bar\" style=\"\n                width:{scaleX(value)}px;\n                background-color: {colorScale ? colorScale(key) : color};\n            \"></div>\n        </div>\n        {/each}\n    </div>\n    <div class=\"controls\">\n        <div class=\"group\">\n            <div class=\"control\">\n                <input type=\"button\"\n                    value=\"Deselect all\"\n                    on:click=\"fire('deselectAllItems')\"\n                />\n            </div>\n            <div class=\"control\">\n                <input type=\"button\"\n                    value=\"Select all\"\n                    on:click=\"fire('selectAllItems')\"\n                />\n            </div>\n        </div>\n        <!-- <div class=\"group\">\n            <div class=\"control\">\n                <input type=\"button\"\n                    value={isOpen ? \"Close\" : \"Open\"}\n                    on:click=\"toggle()\"\n                />\n            </div>\n        </div> -->\n    </div>\n    {#if !active}\n        <div class=\"shield\"></div>\n    {/if}\n</div>\n\n<script>\n    import _ from \"lamb\";\n\n    import * as d3 from \"@vendor/d3\";\n\n    import {arrayMaxBy, mapTo} from \"@utils/arrayUtils\";\n    import {getElementGeometry} from \"@utils/domUtils\";\n\n    export default {\n        // state\n        data () {\n            return {\n                // internal props\n                width: 0,\n                height: 0,\n\n                // // external props\n                // // items [{key: String, value: Number}]\n                // items: [],\n\n                // isOpen: true\n            }\n        },\n        computed: {\n            maxValue: ({items}) => arrayMaxBy(items, \"value\"),\n            scaleX: ({maxValue, innerWidth}) =>\n                d3.scaleLinear()\n                .domain([0, maxValue])\n                .rangeRound([0, innerWidth]),\n            itemsWithSelection: ({items, selectedKeys}) =>\n                _.map(items, ({key, value}) => _.merge(\n                    {key, value},\n                    {selected: _.isIn(selectedKeys, key)}\n                ))\n        },\n\n        onstate ({changed, current, previous}) {\n            console.log(\"Barchart:onstate\", changed, current, previous);\n        },\n\n        oncreate () {\n            this.setGeometry();\n        },\n\n        methods: {\n            setGeometry () {\n                const {\n                    width,\n                    height,\n                    paddingTop,\n                    paddingRight,\n                    paddingBottom,\n                    paddingLeft\n                } = getElementGeometry(this.refs.barchart, [\n                    \"paddingTop\",\n                    \"paddingRight\",\n                    \"paddingBottom\",\n                    \"paddingLeft\"\n                ]);\n\n                this.set({\n                    width,\n                    height,\n                    innerWidth: width - paddingLeft - paddingRight,\n                    innerHeight: height - paddingTop - paddingBottom\n                });\n            },\n        },\n    }\n</script>\n\n<style>\n    .barchartView {\n        width: 100%;\n        height: 100%;\n\n        padding: 1em;\n        background-color: rgba(255, 255, 255, 0.75);\n        box-shadow: 5px 5px 5px #c1c1c1;\n\n        position: relative; /* shield */\n\n        margin-bottom: 1em;\n    }\n\n    .title {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n\n        font-weight: bold;\n        font-size: 1.5em;\n        /* padding: 0.2em; */\n        text-transform: uppercase;\n        /* background: #9e9e9e; */\n        color: #9e9e9e;\n        /* background: #9e9e9e;\n        color: white; */\n\n        margin-bottom: 0.35em;\n    }\n\n    .items {\n        margin-bottom: 1em;\n    }\n\n    .item {\n        display: flex;\n        flex-direction: column;\n        align-items: flex-end;\n        justify-content: space-between;\n        /* padding: 5px; */\n\n        position: relative;\n    }\n    .item:hover {\n        cursor: pointer;\n    }\n    .item:not(:last-child) {\n        margin-bottom: 0.75em;\n    }\n\n    .item.selected {\n        background-color: rgba(0, 0, 0, 0.07);\n    }\n\n    /* .item.selected:after {\n        position: absolute;\n        top: 3px;\n        left: 3px;\n        content: \"\\00d7\";\n        color: rgb(150, 150, 150);\n    } */\n\n    .label {\n        display: flex;\n        align-items: flex-end;\n        user-select: none;\n    }\n    .label span {\n        line-height: 2em;\n    }\n\n    .bar {\n        height: 0.35em;\n    }\n\n    span {\n        font-size: 14px;\n    }\n\n    .controls {\n        width: 100%;\n\n        display: flex;\n        align-items: center;\n        justify-content: flex-end;\n\n        /* if multiple groups */\n        /* justify-content: space-between; */\n    }\n\n    .group {\n        display: flex;\n        align-items: center;\n        justify-content: space-around;\n    }\n\n    .control {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        margin-left: 0.25em;\n        padding: 0.2em;\n    }\n\n    .control input[type=button] {\n        margin: 0;\n        text-transform: uppercase;\n        font-size: 0.8em;\n        color: #9e9e9e;\n        border: 1px solid #9e9e9e;\n        user-select: none;\n        cursor: pointer;\n        padding: 0.2em;\n    }\n\n    .control input[type=button]:focus {\n        outline: none;\n    }\n\n    .shield {\n        width: 100%;\n        height: 100%;\n        background-color: rgb(255, 255, 255, 0.75);\n        position: absolute;\n        top: 0;\n        left: 0;\n    }\n</style>\n",
    "<div class=\"loading\">\n    <p>Loading...</p>\n</div>\n\n<style>\n    .loading {\n        width: 100%;\n    \theight: 100%;\n\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    p {\n        font-size: 32px;\n    }\n</style>\n",
    "<div class=\"mapwrap\">\n    {#if isMapboxGLSupported}\n    <Map\n        {accessToken}\n        {colorScale}\n        {getItemID}\n        {getLngLat}\n        {items}\n        {keys}\n        {styleURL}\n        {radiusMax}\n        {radiusMin}\n        {withScaleControl}\n        {withZoomControl}\n        on:enableItemsEditing=\"fire('enableItemsEditing')\"\n    />\n    {:else}\n    <MapboxglUnsupported />\n    {/if}\n</div>\n\n<script>\n    import mapboxgl from \"mapbox-gl\";\n\n    export default {\n        data () {\n            return {\n                isMapboxGLSupported: mapboxgl.supported()\n            }\n        },\n\n        components: {\n            MapboxglUnsupported: \"./MapboxglUnsupported.html\",\n            Map: \"./Map.html\"\n        },\n    }\n</script>\n\n<style>\n    .mapwrap {\n        width: 100%;\n        height: 100%;\n    }\n</style>\n",
    "<div class=\"mapboxglUnsupported\">\n    <p>Your browser <a href=\"https://www.mapbox.com/help/mapbox-browser-support/\">does not support Mapbox GL</a> and therefore will not display correctly.</p>\n    <p>Please use latest Firefox or Chrome, Safari 9+ or Edge 13+.</p>\n</div>\n\n<style>\n    .mapboxglUnsupported {\n        width: 100%;\n        height: 100%;\n\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        line-height: 2em;\n    }\n\n    p {\n        margin: 0;\n    }\n</style>\n",
    "<svelte:head>\n    <!-- TODO copy this file from node_modules -->\n    <link rel=\"stylesheet\" href=\"mapbox-gl.css\">\n</svelte:head>\n<svelte:window on:resize=\"setGeometry()\" />\n<div ref:layers>\n    <div ref:mapcontainer></div>\n    {#if infopanel}\n    <div ref:infopanel style={infopanel.style}>\n        {infopanel.Name}\n    </div>\n    {/if}\n</div>\n\n<script>\n    import _ from \"lamb\";\n    import mapboxgl from \"mapbox-gl\";\n    import bbox from \"@turf/bbox\";\n    import geoViewport from \"@mapbox/geo-viewport\";\n\n    import * as d3 from \"@vendor/d3\";\n\n    import {\n        FIT_PADDING,\n        MAPBOXGL_MAX_ZOOM,\n        MAPBOXGL_MIN_ZOOM,\n        MAPBOXGL_TILE_SIZE\n    } from \"./consts\";\n    import {getElementGeometry, makeStyle} from \"@utils/domUtils\";\n    import {tap} from \"@utils/debugUtils\";\n    import {sanitizeURLProtocol} from \"@utils/urlUtils\";\n    import {\n        // emptyFeatureCollection,\n        // getCenterCoord,\n        toGeoPoints\n    } from \"@utils/geoUtils\";\n\n    const getSanitizedLink = _.pipe(\n        _.getKey(\"Link\"),\n        sanitizeURLProtocol\n    );\n\n    const pie =\n        d3.pie()\n        .sort(null)\n        .value(_.getKey(\"value\"));\n\n    export default {\n        // state\n        data () {\n            return {\n                width: 0,\n                height: 0,\n                zoom: MAPBOXGL_MIN_ZOOM,\n                infopanel: null,\n                infopanelMargin: 5,\n            }\n        },\n        computed: {\n            // map\n\n            boundingBox: ({items}) => bbox(toGeoPoints(items)),\n            viewport: ({boundingBox, width, height}) => geoViewport.viewport(\n                boundingBox,\n                [width, height],\n                MAPBOXGL_MIN_ZOOM,\n                MAPBOXGL_MAX_ZOOM,\n                MAPBOXGL_TILE_SIZE\n            ),\n\n            // markers\n\n            pieRadiusScale: ({radiusMin, radiusMax}) =>\n                d3.scaleLinear()\n                .domain([MAPBOXGL_MIN_ZOOM, MAPBOXGL_MAX_ZOOM])\n                .range([Number(radiusMin), Number(radiusMax)]),\n            pieRadius: ({pieRadiusScale, zoom}) => pieRadiusScale(zoom),\n            arc: ({pieRadius}) =>\n                d3.arc()\n                .innerRadius(0)\n                .outerRadius(pieRadius),\n            makePie: ({keys}) => _.pipe(\n                _.pickKeys(keys),\n                _.pairs,\n                _.mapWith(([key, value]) => ({\n                    key,\n                    value: Number(value)\n                })),\n                pie\n            ),\n            getColor: ({keys, colorScale}) => _.pipe(\n                _.getPath(\"data.key\"),\n                colorScale\n            ),\n        },\n\n        // lifecycle\n\n        onstate ({changed, current, previous}) {\n            if (!changed.zoom) {\n                console.log(\"map:onstate\", changed, current, previous);\n            }\n\n            if (current.viewport && current.height > 0 && previous.height === 0) {\n                this.createMap();\n            }\n\n            if (this.markersContainer) {\n                if (changed.width || changed.height) {\n                    this.updateContainerGeometry();\n                }\n                if (changed.arc) {\n                    this.updateMarkersRadius();\n                }\n                if (changed.items) {\n                    this.updateMarkers();\n                    this.projectMarkers();\n                }\n            }\n        },\n\n        oncreate () {\n            this.setGeometry();\n        },\n\n        methods: {\n            setGeometry () {\n                const {width, height} = getElementGeometry(this.refs.mapcontainer);\n\n                this.set({width, height});\n            },\n\n            createMap () {\n                const {\n                    accessToken,\n                    styleURL,\n                    viewport,\n                    withZoomControl,\n                    withScaleControl,\n                } = this.get();\n                const {center, zoom} = viewport;\n\n                mapboxgl.accessToken = accessToken;\n\n                this.map = new mapboxgl.Map({\n                    container: this.refs.mapcontainer,\n                    center,\n                    zoom,\n                    style: styleURL,\n                    renderWorldCopies: false,\n                    pitchWithRotate: false,\n                    touchZoomRotate: false,\n                    dragRotate: false,\n                    hash: true,\n                    attributionControl: false,\n                })\n                .addControl(new mapboxgl.AttributionControl({\n                    compact: true\n                }))\n                .on(\"load\", () => {\n                    this.addContainer();\n                    this.updateContainerGeometry();\n                    this.updateMarkers();\n                    this.setMapEvents();\n                    this.fitBoundsToItems();\n                    this.enableItemsEditing();\n                });\n\n                if (withScaleControl) {\n                    this.addScaleControl();\n                }\n\n                if (withZoomControl) {\n                    this.addZoomControl();\n                }\n            },\n\n            addZoomControl () {\n                this.map.addControl(\n                    new mapboxgl.NavigationControl({\n                        showCompass: false\n                    }),\n                    \"bottom-left\"\n                    // \"bottom-right\"\n                );\n            },\n\n            addScaleControl () {\n                this.map.addControl(\n                    new mapboxgl.ScaleControl({\n                        maxWidth: 80,\n                        unit: \"metric\"\n                    }),\n                    \"bottom-right\"\n                );\n            },\n\n            setMapEvents () {\n                const zoomed = () => {\n                    this.projectMarkers();\n                    this.set({zoom: this.map.getZoom()})\n                };\n\n                this.map\n                .on(\"move\", () => {this.projectMarkers()})\n                .on(\"resize\", () => {this.projectMarkers()})\n                .on(\"zoom\", zoomed)\n                .on(\"zoomend\", zoomed)\n            },\n\n            addContainer () {\n                this.markersContainer =\n                    d3.select(this.map.getCanvasContainer())\n                    .append(\"svg\")\n                    .style(\"position\", \"absolute\");\n            },\n\n            updateContainerGeometry () {\n                const {width, height} = this.get();\n\n                this.markersContainer\n                .attr(\"width\", width)\n                .attr(\"height\", height);\n            },\n\n            updateMarkers () {\n                const {getItemID, items, makePie, arc, getColor} = this.get();\n\n                let marker =\n                    this.markersContainer\n                    .selectAll(\".marker\")\n                    .data(items, getItemID);\n\n                marker.exit().remove();\n\n                const markerEnter =\n                    marker.enter()\n                    .append(\"g\")\n                    .attr(\"class\", \"marker\")\n                    .style(\"cursor\", \"crosshair\")\n                    .on(\"mouseout\", d => {\n                        this.resetInfoPanel();\n                    })\n                    .on(\"mouseover\", d => {\n                        this.setInfoPanel(d);\n                    });\n\n                markerEnter\n                    .append(\"a\")\n                    .attr(\"xlink:href\", getSanitizedLink)\n                    .attr(\"target\", \"_blank\")\n                    .attr(\"xlink:show\", \"new\");\n\n                this.marker = marker.merge(markerEnter);\n\n                let sector =\n                    this.marker\n                    .select(\"a\")\n                    .selectAll(\".sector\")\n                    .data(makePie);\n\n                const enter = sector.enter()\n                .append(\"path\")\n                .attr(\"class\", \"sector\");\n\n                sector.merge(enter)\n                .attr(\"d\", arc)\n                .style(\"cursor\", \"pointer\")\n                .style(\"fill\", getColor)\n                .style(\"fill-opacity\", 0.75);\n            },\n\n            updateMarkersRadius () {\n                const {arc} = this.get();\n\n                this.marker.selectAll(\".sector\").attr(\"d\", arc);\n            },\n\n            getMarkerPosition (d) {\n                const {getLngLat} = this.get();\n\n                return this.map.project(getLngLat(d));\n            },\n\n            projectMarkers () {\n                this.marker.attr(\"transform\", d => {\n                    const {x, y} = this.getMarkerPosition(d);\n\n                    return `translate(${x},${y})`;\n                });\n            },\n\n            setInfoPanel (d) {\n                const {width, height, infopanelMargin, pieRadius} = this.get();\n                const safety = pieRadius + infopanelMargin;\n\n                const {x, y} = this.getMarkerPosition(d);\n                const vStyle = (y < height / 2)\n                    ? {top: y + safety}\n                    : {bottom: height - y + safety};\n                const hStyle = (x < width / 2)\n                    ? {left: x + safety}\n                    : {right: width - x + safety};\n                const style = makeStyle(\n                    _.mapValues(\n                        _.merge({}, vStyle, hStyle),\n                        v => `${v}px`\n                    )\n                );\n\n                this.set({\n                    infopanel: _.merge(d, {style})\n                });\n            },\n\n            resetInfoPanel (d) {\n                this.set({\n                    infopanel: null,\n                    infopanelStyle: null\n                });\n            },\n\n            fitBoundsToItems () {\n                const {boundingBox} = this.get();\n\n                this.map.fitBounds(boundingBox, {\n                    linear: true,\n                    padding: {\n                        top: FIT_PADDING,\n                        bottom: FIT_PADDING,\n                        left: FIT_PADDING,\n                        right: FIT_PADDING\n                    }\n                });\n            },\n\n            enableItemsEditing () {\n                this.fire(\"enableItemsEditing\");\n            }\n        },\n        helpers: {\n            getSanitizedLink\n        }\n    }\n</script>\n\n<style>\n    ref:layers {\n        width: 100%;\n        height: 100%;\n        position: relative;\n    }\n\n    ref:mapcontainer {\n        width: 100%;\n        height: 100%;\n    }\n\n    svg {\n        width: 100%;\n        height: 100%;\n        position: absolute !important;\n    }\n\n    .marker {\n        cursor: crosshair !important;\n    }\n\n    ref:infopanel {\n        position: absolute;\n        background-color: rgb(255, 255, 255, 0.7);\n        box-shadow: 3px 3px 3px #c1c1c1;\n        pointer-events: none;\n\n        font-weight: bold;\n        line-height: 1em;\n        padding: 0.5em;\n    }\n</style>\n"
  ],
  "names": [],
  "mappings": "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"
}